{
	"name": "oracle-java",
	"displayName": "Java",
	"description": "Java Platform Extension for Visual Studio Code",
	"author": "Oracle",
	"license": "Apache 2.0",
	"version": "0.1.0",
	"preview": false,
	"repository": {
		"type": "git",
		"url": "https://github.com/oracle/javavscode"
	},
	"publisher": "Oracle",
	"icon": "images/logo.png",
	"categories": [
		"Programming Languages",
		"Debuggers",
		"Testing",
		"Snippets",
		"Linters",
		"Formatters",
		"Other"
	],
	"keywords": [
		"JDK",
		"OpenJDK",
		"Maven",
		"Gradle",
		"java properties",
		"junit",
		"multi-root ready",
		"multiroot"
	],
	"engines": {
		"vscode": "^1.76.0"
	},
	"activationEvents": [
		"onLanguage:java",
		"workspaceContains:**/*.java",
		"workspaceContains:pom.xml",
		"workspaceContains:build.gradle",
		"onDebug",
		"onDebugDynamicConfigurations"
	],
	"main": "./out/extension.js",
	"contributes": {
		"languages": [
			{
				"id": "java",
				"extensions": [
					".java",
					".jav"
				],
				"aliases": [
					"Java",
					"java"
				],
				"configuration": "./language-configuration.json"
			},
			{
				"id": "javascript",
				"mimetypes": [
					"text/javascript",
					"application/javascript"
				]
			},
			{
				"id": "jackpot-hint",
				"extensions": [
					".hint"
				],
				"aliases": [
					"Java Hints"
				]
			}
		],
		"grammars": [
			{
				"language": "jackpot-hint",
				"scopeName": "source.java",
				"path": "./syntaxes/java.tmLanguage.json"
			},
			{
				"injectTo": [
					"source.java"
				],
				"scopeName": "inline.java.string.template",
				"path": "./syntaxes/java-st-injection.json",
				"embeddedLanguages": {
					"meta.embedded.java.string.template": "java"
				}
			}
		],
		"views": {
			"explorer": [
				{
					"id": "foundProjects",
					"name": "Projects",
					"when": "nbJdkReady"
				},
				{
					"id": "run-config",
					"name": "Run Configuration",
					"contextualTitle": "Run Configuration",
					"when": "runConfigurationInitialized"
				}
			]
		},
		"viewsWelcome": [],
		"configuration": {
			"title": "Java",
			"properties": {
				"jdk.jdkhome": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"description": "Specifies JDK for the Oracle Visual Studio Code Extension",
					"scope": "machine-overridable"
				},
				"jdk.verbose": {
					"type": "boolean",
					"default": false,
					"description": "Enables verbose messages from the Oracle Visual Studio Code Extension"
				},
				"jdk.userdir": {
					"description": "Keep settings and caches as 'global' or 'local' per workspace?",
					"type": "string",
					"enum": [
						"global",
						"local"
					],
					"enumDescriptions": [
						"Share data between all workspaces (more effective)",
						"Each workspace has its own data (more isolated)"
					],
					"default": "local",
					"deprecationMessage": "Separate userdir for each workspace is the default behaviour"
				},
				"jdk.revealActiveInProjects": {
					"type": "boolean",
					"default": true,
					"description": "Reveals active text editor in Projects view"
				},
				"jdk.test.editor.enableShortcuts": {
					"type": "boolean",
					"default": false,
					"description": "Enable Run/Debug test in editor"
				},
				"jdk.javadoc.load.timeout": {
					"type": "integer",
					"default": 100,
					"description": "Timeout (in milliseconds) for loading Javadoc in code completion (-1 for unlimited)"
				},
				"jdk.format.settingsPath": {
					"type": "string",
					"description": "Path to the file containing exported formatter settings",
					"default": null
				},
				"jdk.hints.preferences": {
					"type": "string",
					"description": "Path to the file containing exported hints preferences",
					"default": null
				},
				"jdk.java.onSave.organizeImports": {
					"type": "boolean",
					"default": true,
					"description": "Enable organize imports action on a document save"
				},
				"jdk.java.imports.groups": {
					"type": "array",
					"description": "Groups of import statements (specified by their package prefixes) and their sorting order. Import statements within a group are ordered alphabetically",
					"default": [
						"java",
						"javax",
						"org",
						"com",
						""
					]
				},
				"jdk.java.imports.countForUsingStarImport": {
					"type": "integer",
					"description": "Class count to use a star-import",
					"default": 999,
					"minimum": 1
				},
				"jdk.java.imports.countForUsingStaticStarImport": {
					"type": "integer",
					"description": "Members count to use a static star-import",
					"default": 999,
					"minimum": 1
				},
				"jdk.runConfig.arguments": {
					"type": "string",
					"default": "",
					"description": "Arguments"
				},
				"jdk.runConfig.vmOptions": {
					"type": "string",
					"default": "",
					"description": "VM options"
				},
				"jdk.serverVmOptions": {
					"type": "array",
					"default": [],
					"description": "Specifies extra VM arguments used to launch the Java Language Server",
					"scope": "machine-overridable"
				},
				"jdk.runConfig.env": {
					"type": "string",
					"default": "",
					"description": "Environment variables"
				},
				"jdk.runConfig.cwd": {
					"type": "string",
					"default": "",
					"description": "Working directory"
				},
				"jdk.advanced.disable.nbjavac": {
					"type": "boolean",
					"default": false,
					"description": "Advanced option: disable nb-javac library, javac from the selected JDK will be used. The selected JDK must be at least JDK 22."
				}
			}
		},
		"breakpoints": [
			{
				"language": "java"
			},
			{
				"language": "groovy"
			}
		],
		"debuggers": [
			{
				"type": "jdk",
				"label": "Java+",
				"runtime": "node",
				"languages": [
					"java"
				],
				"configurationAttributes": {
					"launch": {
						"properties": {
							"mainClass": {
								"type": "string",
								"description": "Absolute path to the program main class.",
								"default": "${file}"
							},
							"classPaths": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"description": "The classpaths for launching the JVM.",
								"default": []
							},
							"console": {
								"type": "string",
								"enum": [
									"internalConsole"
								],
								"description": "The specified console to launch the program.",
								"default": "internalConsole"
							},
							"args": {
								"type": [
									"string",
									"null"
								],
								"description": "Arguments for the executed class",
								"default": null
							},
							"vmArgs": {
								"type": [
									"string",
									"null"
								],
								"description": "Arguments for the Java VM",
								"default": null
							},
							"cwd": {
								"type": [
									"string",
									"null"
								],
								"description": "Working directory for the program execution",
								"default": null
							},
							"env": {
								"type": [
									"object"
								],
								"description": "Environment variables for the program execution",
								"default": {}
							},
							"launchConfiguration": {
								"type": [
									"string",
									"null"
								],
								"description": "Mode and default behaviour for launch"
							}
						}
					},
					"attach": {
						"properties": {
							"hostName": {
								"type": "string",
								"default": "localhost",
								"description": "Host name or IP address to which to attach"
							},
							"port": {
								"type": "string",
								"default": "8000",
								"description": "Port number to which to attach"
							},
							"sharedMemoryName": {
								"type": "string",
								"description": "Shared memory name of the debuggee"
							},
							"processId": {
								"type": "string",
								"default": "${command:jdk.java.attachDebugger.pickProcess}",
								"description": "Process Id of the debuggee"
							},
							"listen": {
								"type": "string",
								"default": "false",
								"description": "Listen for the debuggee to attach"
							},
							"timeout": {
								"type": "string",
								"default": "30000",
								"description": "Timeout while waiting to attach"
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"type": "jdk",
						"request": "launch",
						"name": "Launch Java App"
					}
				],
				"configurationSnippets": [
					{
						"label": "Java+: Launch Java Application",
						"description": "Launch a Java Application in debug mode",
						"body": {
							"type": "jdk",
							"request": "launch",
							"name": "Launch Java App"
						}
					}
				]
			}
		],
		"commands": [
			{
				"command": "jdk.node.properties.edit",
				"title": "Properties"
			},
			{
				"command": "jdk.workspace.compile",
				"title": "Compile Workspace",
				"category": "Java"
			},
			{
				"command": "jdk.workspace.clean",
				"title": "Clean Workspace",
				"category": "Java"
			},
			{
				"command": "jdk.workspace.new",
				"title": "New from Template...",
				"category": "Java",
				"icon": "$(new-file)"
			},
			{
				"command": "jdk.workspace.newproject",
				"title": "New Project...",
				"category": "Java",
				"icon": "$(new-folder)"
			},
			{
				"command": "jdk.java.goto.super.implementation",
				"title": "Go to Super Implementation",
				"category": "Java"
			},
			{
				"command": "jdk.open.type",
				"title": "Open Type...",
				"category": "Java"
			},
			{
				"command": "jdk.foundProjects.deleteEntry",
				"title": "Delete"
			},
			{
				"command": "jdk:Edit:org.openide.actions.DeleteAction",
				"title": "Delete"
			},
			{
				"command": "workbench.action.debug.run",
				"title": "Run Without Debugging",
				"icon": "$(run)"
			},
			{
				"command": "workbench.action.debug.start",
				"title": "Start Debugging",
				"icon": "$(debug-alt)"
			},
			{
				"command": "jdk.project.run",
				"category": "Project",
				"title": "Run Project Without Debugging",
				"icon": "$(run)"
			},
			{
				"command": "jdk.project.debug",
				"category": "Project",
				"title": "Debug Project",
				"icon": "$(debug-alt)"
			},
			{
				"command": "jdk.project.test",
				"category": "Project",
				"title": "Test Project",
				"icon": "$(testing-run-all-icon)"
			},
			{
				"command": "jdk.project.compile",
				"category": "Project",
				"title": "Compile Project"
			},
			{
				"command": "jdk.project.clean",
				"category": "Project",
				"title": "Clean Project"
			},
			{
				"command": "jdk.workspace.configureRunSettings",
				"title": "Edit",
				"icon": "$(edit)"
			},
			{
				"command": "jdk.select.editor.projects",
				"title": "Reveal active editor in Projects",
				"category": "Project"
			},
			{
				"command": "workbench.action.debug.run",
				"title": "Run Without Debugging",
				"icon": "$(run)"
			},
			{
				"command": "workbench.action.debug.start",
				"title": "Start Debugging",
				"icon": "$(debug-alt)"
			},
			{
				"command": "testing.runAll",
				"title": "Run All Tests",
				"category": "Test"
			},
			{
				"command": "jdk.addEventListener",
				"title": "Add event listener"
			},
			{
				"command": "jdk.select.editor.projects",
				"title": "Reveal active editor in Projects",
				"category": "Project"
			},
			{
				"command": "jdk.download.jdk",
				"title": "Download, install and use JDK"
			},
			{
				"command": "jdk.open.test",
				"title": "Go To Test/Tested class...",
				"category": "Java"
			},
			{
				"command": "jdk.delete.cache",
				"title": "Delete Oracle Java extension cache for this workspace"
			}
		],
		"keybindings": [
			{
				"command": "jdk.workspace.compile",
				"key": "shift+alt+b",
				"when": "nbJdkReady"
			},
			{
				"command": "jdk.java.goto.super.implementation",
				"key": "alt+U",
				"mac": "alt+cmd+U",
				"when": "editorHasCodeActionsProvider && editorTextFocus"
			},
			{
				"command": "editor.action.sourceAction",
				"key": "alt+insert",
				"mac": "ctrl+alt+enter",
				"when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
			}
		],
		"menus": {
			"editor/context": [
				{
					"command": "jdk.java.goto.super.implementation",
					"when": "nbJdkReady && editorLangId == java && editorTextFocus",
					"group": "navigation@100"
				},
				{
					"command": "jdk.open.test",
					"when": "nbJdkReady && editorLangId == java",
					"group": "navigation@101"
				},
				{
					"command": "jdk.project.run",
					"when": "nbJdkReady && editorLangId == java && resourceExtname == .java",
					"group": "javadebug@1"
				},
				{
					"command": "jdk.project.debug",
					"when": "nbJdkReady && editorLangId == java && resourceExtname == .java",
					"group": "javadebug@2"
				}
			],
			"explorer/context": [
				{
					"command": "jdk.workspace.new",
					"when": "nbJdkReady && explorerResourceIsFolder",
					"group": "navigation@3"
				},
				{
					"command": "jdk.open.test",
					"when": "nbJdkReady && resourceExtname == .java",
					"group": "goto@1"
				},
				{
					"command": "jdk.project.run",
					"when": "nbJdkReady && resourceExtname == .java",
					"group": "javadebug@1"
				},
				{
					"command": "jdk.project.debug",
					"when": "nbJdkReady && resourceExtname == .java",
					"group": "javadebug@2"
				}
			],
			"commandPalette": [
				{
					"command": "jdk.workspace.new"
				},
				{
					"command": "jdk.workspace.newproject"
				},
				{
					"command": "jdk.download.jdk"
				},
				{
					"command": "jdk.workspace.compile",
					"when": "nbJdkReady"
				},
				{
					"command": "jdk.open.test",
					"when": "nbJdkReady && editorLangId == java"
				},
				{
					"command": "jdk.java.goto.super.implementation",
					"when": "nbJdkReady && editorLangId == java"
				},
				{
					"command": "jdk.foundProjects.deleteEntry",
					"when": "false"
				},
				{
					"command": "jdk.node.properties.edit",
					"when": "false"
				},
				{
					"command": "jdk:Edit:org.openide.actions.DeleteAction",
					"when": "false"
				},
				{
					"command": "jdk.workspace.configureRunSettings",
					"when": "false"
				},
				{
					"command": "jdk.addEventListener",
					"when": "false"
				}
			],
			"view/title": [
				{
					"command": "jdk.workspace.newproject",
					"when": "nbJdkReady && view == foundProjects",
					"group": "navigation"
				},
				{
					"command": "jdk.workspace.compile",
					"when": "nbJdkReady && view == foundProjects"
				},
				{
					"command": "jdk.workspace.clean",
					"when": "nbJdkReady && view == foundProjects"
				},
				{
					"command": "testing.runAll",
					"when": "nbJdkReady && view == foundProjects"
				},
				{
					"command": "workbench.action.debug.run",
					"when": "nbJdkReady && view == foundProjects"
				},
				{
					"command": "workbench.action.debug.start",
					"when": "nbJdkReady && view == foundProjects"
				}
			],
			"view/item/context": [
				{
					"command": "jdk.foundProjects.deleteEntry",
					"when": "view == foundProjects && viewItem == node"
				},
				{
					"command": "jdk:Edit:org.openide.actions.DeleteAction",
					"when": "viewItem =~ /cap:delete/",
					"group": "db@50"
				},
				{
					"command": "jdk.workspace.new",
					"when": "view == foundProjects && viewItem =~ /is:folder/",
					"group": "inline@1"
				},
				{
					"command": "jdk.project.run",
					"when": "view == foundProjects && viewItem =~ /is:project/ && viewItem =~ /^(?!.*is:projectRoot)/",
					"group": "inline@10"
				},
				{
					"command": "jdk.project.debug",
					"when": "view == foundProjects && viewItem =~ /is:project/ && viewItem =~ /^(?!.*is:projectRoot)/",
					"group": "inline@11"
				},
				{
					"command": "jdk.project.test",
					"when": "view == foundProjects && viewItem =~ /is:project/ && viewItem =~ /^(?!.*is:projectRoot)/",
					"group": "F@30"
				},
				{
					"command": "jdk.project.compile",
					"when": "view == foundProjects && viewItem =~ /is:project/",
					"group": "F@10"
				},
				{
					"command": "jdk.project.clean",
					"when": "view == foundProjects && viewItem =~ /is:project/",
					"group": "F@20"
				},
				{
					"command": "jdk.workspace.configureRunSettings",
					"when": "view == run-config && viewItem == configureRunSettings",
					"group": "inline@1"
				}
			]
		},
		"netbeans.iconMapping": [
			{
				"uriExpression": "nbres:/org/netbeans/modules/gradle/resources/gradle",
				"codeicon": "project"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/gradle/java/resources/javaseProjectIcon",
				"codeicon": "project"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/maven/resources/jaricon",
				"codeicon": "project"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/gradle/resources/libraries",
				"codeicon": "settings-gear"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/gradle/resources/(empty|module-artifact)",
				"codeicon": "file-zip"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/maven/DependencyIcon",
				"codeicon": "file-zip"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/maven/TransitiveDependencyIcon",
				"codeicon": "library"
			},
			{
				"uriExpression": "nbres:/org/netbeans/spi/java/project/support/ui/package(Empty)?",
				"codeicon": "file-submodule"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/java/resources/(abstract_class_file|class|enum_file)",
				"codeicon": "symbol-class"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/java/resources/(annotation_file|interface_file)",
				"codeicon": "symbol-interface"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/nbcode/integration/resources/uidefaults/Tree.(open|closed)Icon",
				"valueMatch": [
					" [0-9]+([A-Z][A-z]+)?SourceRoot | Dependencies[A-Z]+ | OtherRoots | projectfiles | BootCPNode "
				],
				"codeicon": "file-submodule"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/nbcode/integration/resources/uidefaults/Tree.(open|closed)Icon",
				"valueMatch": [
					" [0-9]+([A-z]+).(java|groovy|generated|resources) "
				],
				"codeicon": "file-submodule"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/nbcode/integration/resources/uidefaults/Tree.(open|closed)Icon",
				"codeicon": "*folder"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/java/api/common/project/ui/resources/platform",
				"codeicon": "vm"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/cloud/oracle/resources/tenancy.svg",
				"codeicon": "cloud"
			},
			{
				"uriExpression": "nbres:/org/netbeans/modules/cloud/oracle/resources/compartment.svg",
				"codeicon": "archive"
			},
			{
				"uriExpression": "nbres:/org/openide/nodes/wait.gif",
				"codeicon": "watch"
			}
		],
		"jsonValidation": [
			{
				"fileMatch": "package.json",
				"url": "./schemas/package.schema.json"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./ && node ./esbuild.js",
		"watch": "tsc -watch -p ./ | node ./esbuild.js --watch",
		"test": "npm run compile && node ./out/test/runTest.js",
		"nbcode": "node ./out/nbcode.js",
		"nbjavac": "node ./out/nbcode.js -J-Dnetbeans.close=true --modules --install .*nbjavac.*",
		"apisupport": "node ./out/nbcode.js -J-Dnetbeans.close=true --modules --install '(org.netbeans.libs.xerces|org.netbeans.modules.editor.structure|org.netbeans.modules.xml|org.netbeans.modules.xml.axi|org.netbeans.modules.xml.retriever|org.netbeans.modules.xml.schema.model|org.netbeans.modules.xml.tax|org.netbeans.modules.xml.text|org.netbeans.modules.ant.browsetask|.*apisupport.*|org.netbeans.modules.debugger.jpda.ant)' && node ./out/nbcode.js -J-Dnetbeans.close=true --modules --enable .*apisupport.ant",
		"artifactory:check": "node ./esbuild.js --artifactory-check"
		},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/mocha": "^9.0.0",
		"@types/node": "^13.11.0",
		"@types/ps-node": "^0.1.0",
		"@types/vscode": "^1.76.0",
		"@types/vscode-webview": "^1.57.1",
		"@vscode/codicons": "0.0.29",
		"@vscode/test-electron": "^2.4.0",
		"esbuild": "^0.16.17",
		"glob": "^7.1.6",
		"mocha": "^9.1.2",
		"ps-node": "^0.1.6",
		"typescript": "^4.6.4"
	},
	"dependencies": {
		"@vscode/debugadapter": "^1.65.0",
		"@vscode/webview-ui-toolkit": "^1.2.2",
		"axios": "^1.7.3",
		"jsonc-parser": "3.3.1",
		"vscode-languageclient": "^8.1.0"
	}
}
